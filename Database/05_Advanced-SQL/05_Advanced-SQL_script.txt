1.  Write a SQL query to find the names and salaries of the employees
    that take the minimal salary in the company. Use a nested SELECT statement.

use [TelerikAcademy]
SELECT 
	e.[FirstName] + ' ' + e.[LastName] AS [Name],
	e.[Salary]
FROM [Employees] e
WHERE [Salary] = 
	(SELECT MIN([Salary])
	FROM [Employees])

-----------------------------------------------------------
2.  Write a SQL query to find the names and salaries of the employees
    that have a salary that is up to 10% higher than
	the minimal salary for the company.

use [TelerikAcademy]
SELECT 
	e.[FirstName] + ' ' + e.[LastName] AS [Name],
	e.[Salary]
FROM [Employees] e
WHERE [Salary] >
	(SELECT MIN([Salary])
	FROM [Employees]) +
	((SELECT MIN([Salary])
	FROM [Employees]) / 10)
ORDER BY e.[Salary]

-----------------------------------------------------------
3.  Write a SQL query to find the full name, salary and department
    of the employees that take the minimal salary in their department.
	Use a nested SELECT statement.

use [TelerikAcademy]
SELECT
	e.[FirstName] + ' ' + e.[LastName] AS [Name],
	e.[Salary],
	d.Name AS [Departmant]
FROM [Employees] e
	INNER JOIN [Departments] d
	ON e.DepartmentID = d.DepartmentID
WHERE [Salary] =
	(SELECT MIN([Salary])
	FROM [Employees]
	WHERE e.DepartmentID = DepartmentID)
ORDER BY e.[Salary]

-----------------------------------------------------------
4.  Write a SQL query to find the average salary in the department #1.

use [TelerikAcademy]
SELECT
	AVG ([Salary]) AS [Avarage salary in departmant #1]
FROM [Employees] e
WHERE e.[DepartmentID] = 1

-----------------------------------------------------------
5.  Write a SQL query to find the average salary  in the "Sales" department.

use [TelerikAcademy]
SELECT
	AVG ([Salary]) AS [Avarage salary in Sales departmant]
FROM [Employees] e
	INNER JOIN Departments d
	ON e.DepartmentID = d.DepartmentID
		AND d.Name = 'Sales'

-----------------------------------------------------------
6.  Write a SQL query to find the number of employees in the "Sales" department.

use [TelerikAcademy]
SELECT
	COUNT (*) AS [number of employees in the "Sales" department]
FROM [Employees] e
	INNER JOIN Departments d
	ON e.DepartmentID = d.DepartmentID
		AND d.Name = 'Sales'

-----------------------------------------------------------
7.  Write a SQL query to find the number of all employees that have manager.

use [TelerikAcademy]
SELECT
	COUNT (*) AS [number of all employees that have manager]
FROM [Employees] e
WHERE e.ManagerID IS NOT NULL

-----------------------------------------------------------
8.  Write a SQL query to find the number of all employees that have no manager.

use [TelerikAcademy]
SELECT
	COUNT (*) AS [number of all employees that have manager]
FROM [Employees] e
WHERE e.ManagerID IS NULL

-----------------------------------------------------------
9.  Write a SQL query to find all departments and the average salary for each of them.

use [TelerikAcademy]
SELECT
	d.Name AS [Departmant],
	AVG (Salary) AS [average salary]
FROM [Employees] e
	INNER JOIN Departments d
	ON e.DepartmentID = d.DepartmentID
GROUP BY e.DepartmentID, d.Name

-----------------------------------------------------------
10.  Write a SQL query to find the count of all employees in each department and for each town.

*************
count of all employees in each department

use [TelerikAcademy]
SELECT
	d.Name AS [Department],
	COUNT (*) AS [Number of employees]
FROM [Employees] e
	INNER JOIN Departments d
	ON e.DepartmentID = d.DepartmentID
GROUP BY e.DepartmentID, d.Name

**************
Write a SQL query to find the count of all employees in each town.

use [TelerikAcademy]
SELECT
	t.Name AS [Town],
	COUNT (*) AS [Number of employees]
FROM [Employees] e
	INNER JOIN Addresses a
	ON e.AddressID = a.AddressID
		INNER JOIN Towns t
		ON a.TownID = t.TownID
GROUP BY a.TownID, t.Name

-----------------------------------------------------------
11.  Write a SQL query to find all managers that have exactly 5 employees.
     Display their first name and last name.

use [TelerikAcademy]
SELECT
	m.FirstName + ' ' + m.LastName AS [Manager],
	COUNT (*) AS [Nuber of employees]
FROM Employees e
	INNER JOIN Employees m
	ON e.ManagerID = m.EmployeeID
GROUP BY e.ManagerID, m.FirstName, m.LastName
HAVING COUNT (*) = 5

-----------------------------------------------------------
12.  Write a SQL query to find all employees along with their managers.
	 For employees that do not have manager display the value "(no manager)".

use [TelerikAcademy]
SELECT
	e.FirstName + ' ' + e.LastName AS [Employee],
	ISNULL (m.FirstName + ' ' + m.LastName, 'no manager') AS [Manager]
FROM Employees e
	LEFT OUTER JOIN Employees m
	ON e.ManagerID = m.EmployeeID

-----------------------------------------------------------
13.  Write a SQL query to find the names of all
     employees whose last name is exactly 5 characters long.
	 Use the built-in LEN(str) function.

use [TelerikAcademy]
SELECT
	e.FirstName, 
	e.LastName
FROM Employees e
WHERE LEN (e.LastName) = 5
ORDER BY e.LastName ASC

-----------------------------------------------------------
14.  Write a SQL query to display the current date and time
     in the following format "day.month.year hour:minutes:seconds:milliseconds".
	 Search in  Google to find how to format dates in SQL Server.

use [TelerikAcademy]
SELECT
	CONVERT(nvarchar(30), GETDATE(), 113)
	AS [Current date]

-----------------------------------------------------------
15.  Write a SQL statement to create a table Users.
     Users should have username, password, full name and last login time.
	 Choose appropriate data types for the table fields.
	 Define a primary key column with a primary key constraint.
	 Define the primary key column as identity to facilitate inserting records.
	 Define unique constraint to avoid repeating usernames.
	 Define a check constraint to ensure the password is at least 5 characters long.

use [TelerikAcademy]
CREATE TABLE Users (
	UsersID int IDENTITY,
	CONSTRAINT PK_Users PRIMARY KEY(UsersID),
	Username nvarchar(40) UNIQUE NOT NULL,
	UserPassword nvarchar(30) NOT NULL,
	FullName nvarchar(60) NOT NULL,
	LastLoginTime datetime NOT NULL
);
GO

ALTER TABLE Users
ADD CONSTRAINT passwordLength CHECK (LEN (UserPassword) >= 5 );
GO

-----------------------------------------------------------
16.  Write a SQL statement to create a view that
     displays the users from the Users table that
	 have been in the system today.
	 Test if the view works correctly.

use [TelerikAcademy];
GO

CREATE VIEW display_users
AS
SELECT FullName
FROM Users
GO

SELECT *
FROM display_users

-----------------------------------------------------------
17.  Write a SQL statement to create a table Groups.
     Groups should have unique name (use unique constraint).
	 Define primary key and identity column.

use [TelerikAcademy]
CREATE TABLE Groups (
	GroupID int IDENTITY,
	CONSTRAINT PK_Group PRIMARY KEY(GroupID),
	Name nvarchar(40) UNIQUE NOT NULL
);
GO

-----------------------------------------------------------
18.  Write a SQL statement to add a column GroupID to the table Users.
	 Fill some data in this new column and as well in the Groups table.
	 Write a SQL statement to add a foreign key constraint
	 between tables Users and Groups tables.

use [TelerikAcademy]
-- Add column GroupID to the table Users
ALTER TABLE Users ADD GroupID int
GO

-- Add a foreign key constraint Users --> Groups
ALTER TABLE Users
ADD CONSTRAINT FK_Users_Grous
  FOREIGN KEY (GroupID)
  REFERENCES Groups(GroupID)
GO

-- Insert data in Groups
INSERT INTO Groups(Name)
VALUES ('Database'),
		('Algoritms')
GO

-- Insert data in Users
INSERT INTO Users(Username, UserPassword, FullName, LastLoginTime, GroupID)
VALUES ('Pesho', 'password1', 'Pesho Peshev', GETDATE (), 1),
		('Stamat', 'password2', 'Stamat Stamatov', GETDATE (), 2),
		('Kaka', 'password2', 'Kaka Penka', GETDATE (), 1)
GO

-----------------------------------------------------------
19.  Write SQL statements to insert several records in the Users and Groups tables.

use [TelerikAcademy]
-- Insert data in Groups
INSERT INTO Groups(Name)
VALUES ('Database'),
		('Algoritms')
GO

-- Insert data in Users
INSERT INTO Users(Username, UserPassword, FullName, LastLoginTime, GroupID)
VALUES ('Pesho', 'password1', 'Pesho Peshev', GETDATE (), 1),
		('Stamat', 'password2', 'Stamat Stamatov', GETDATE (), 2),
		('Kaka', 'password2', 'Kaka Penka', GETDATE (), 1)
GO

-----------------------------------------------------------
20.  Write SQL statements to update some of the records in the Users and Groups tables.

use [TelerikAcademy]
-- update Pesho full name
UPDATE Users
SET FullName = 'Pesho Goshev'
WHERE Username = 'Pesho'
GO

-- update Algoritms to Algoritms and Data Structure
UPDATE Groups
SET Name = 'Algoritms and Data Structure'
WHERE Name = 'Algoritms'
GO

-----------------------------------------------------------
21.  Write SQL statements to delete some of the records from the Users and Groups tables.

use [TelerikAcademy]
 DELETE
 FROM Users
 WHERE Username = 'Stamat'
 GO

 DELETE
 FROM Groups
 WHERE GroupID = 2
 GO

-----------------------------------------------------------
22.  Write SQL statements to insert in the Users table
	 the names of all employees from the Employees table.
	 Combine the first and last names as a full name.
	 For username use the first letter of the first
	 name + the last name (in lowercase).
	 Use the same for the password, and NULL for last login time.

use [TelerikAcademy]
ALTER TABLE Users
ALTER COLUMN LastLoginTime datetime;

use [TelerikAcademy]
-- Insert data in Users
INSERT INTO Users(Username, UserPassword, FullName, LastLoginTime)
SELECT
LOWER (SUBSTRING (FirstName, 1, 4) + LastName) AS [Username],
LOWER (SUBSTRING (FirstName, 1, 3) + LastName) AS [UserPassword],
FirstName + ' ' + LastName AS [FullName],
NULL AS [LastLoginTime]
FROM Employees
GO

-----------------------------------------------------------
23.  Write a SQL statement that changes the password to NULL
	 for all users that have not been in the system since 10.03.2010.

use [TelerikAcademy]
UPDATE Users
SET UserPassword = NULL
WHERE LastLoginTime < '10/03.2010'
GO

-----------------------------------------------------------
24.  Write a SQL statement that deletes all
	 users without passwords (NULL password).

use [TelerikAcademy]
DELETE 
FROM Users
WHERE UserPassword IS NULL
GO

-----------------------------------------------------------
25.  Write a SQL query to display the average employee
	 salary by department and job title.

use [TelerikAcademy]
SELECT
e.JobTitle,
d.Name,
AVG (Salary) AS [Avg Salary]
FROM Employees e
	INNER JOIN Departments d
	ON e.DepartmentID = d.DepartmentID
GROUP BY e.DepartmentID, e.JobTitle, d.Name 


-----------------------------------------------------------
26.  Write a SQL query to display the minimal employee
	 salary by department and job title along with
	 the name of some of the employees that take it.

use [TelerikAcademy]
SELECT
e.LastName,
e.JobTitle,
d.Name,
MIN (Salary) AS [Min Salary]
FROM Employees e
	INNER JOIN Departments d
	ON e.DepartmentID = d.DepartmentID
GROUP BY e.DepartmentID, e.JobTitle, d.Name, e.LastName

-----------------------------------------------------------
27.  Write a SQL query to display the town where
	 maximal number of employees work.

use [TelerikAcademy]
SELECT TOP 1
t.Name,
COUNT (*) AS [Number of Employees]
FROM Employees e
	INNER JOIN Addresses a
	ON e.AddressID = a.AddressID
		INNER JOIN Towns t
		ON a.TownID = t.TownID
GROUP BY t.Name
ORDER BY COUNT (*) DESC

-----------------------------------------------------------
28.  Write a SQL query to display the number of managers from each town.

use [TelerikAcademy]
SELECT
t.Name,
COUNT (*) AS [Number of Managers]
FROM Employees e
	INNER JOIN Employees m
	ON e.ManagerID = m.EmployeeID
		INNER JOIN Addresses a
		ON m.AddressID = a.AddressID
			INNER JOIN Towns t
			ON a.TownID = t.TownID
GROUP BY t.Name
ORDER BY COUNT (*) DESC

-----------------------------------------------------------
30.  Start a database transaction, delete all employees
	 from the 'Sales' department along with all dependent
	 records from the pother tables.
	 At the end rollback the transaction.

use [TelerikAcademy]

BEGIN TRANSACTION

ALTER TABLE Departments
DROP CONSTRAINT   FK_Departments_Employees
GO

ALTER TABLE EmployeesProjects
DROP CONSTRAINT   FK_EmployeesProjects_Employees
GO

Delete e
FROM Employees e
	JOIN Departments d
	ON e.AddressID = d.DepartmentID
WHERE d.Name = 'Sales'

ROLLBACK TRAN
--COMMIT TRANSACTION

-----------------------------------------------------------
31.  Start a database transaction and drop the table
     EmployeesProjects. Now how you could
	 restore back the lost table data?
- To restore table data use ROLLBACK TRANSACTION.
  If COMMIT TRANSACTION, you can restore table data from BACKUP.
	 
use [TelerikAcademy]

BEGIN TRANSACTION

DROP TABLE EmployeesProjects

ROLLBACK TRAN
--COMMIT TRANSACTION

-----------------------------------------------------------


